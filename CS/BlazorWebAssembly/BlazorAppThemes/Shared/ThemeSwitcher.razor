@using Microsoft.AspNetCore.WebUtilities
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@(StylesheetLinkContainer(
    new StylesheetLinkContext(
            owner: this,
            toggleButton: 
                    ToggleButton(new ToggleButtonContext(this)),
            themeSelectorContainer: 
                    ThemeSelectorContainer(new ThemeSelectorContext(
                        visible: themeSelectorVisible,
                        view: 
                            @<ul class="nav nav-pills">
                                @foreach (var themeSet in GroupedThemes) {
                                    <li class="nav-item theme-group">@themeSet.Key</li>
                                    @foreach (var theme in themeSet.Value) {
                                        <li class="nav-item">
                                            <a class="nav-link @(currentTheme == theme ? "active" : "") "
                                                href="@GetUrlWithSpecifiedTheme(theme)">
                                                <span class="image @theme.ToLower().Replace(" ", "-")" aria-hidden="true"></span>
                                                <span class="theme-name">@theme</span>
                                            </a>
                                        </li>
                                    }
                                }
                            </ul>)
                        )
        )
))

@code {
    static readonly Dictionary<string, string[]> GroupedThemes = new () {
        ["Color Themes"] = new [] { "default" },
        ["DevExpress Themes"] = new [] {
            "blazing berry", "purple", "office white"
        },
        ["Bootswatch Themes"] = new [] {
            "cerulean", "cosmo", "cyborg", "darkly", "flatly", "journal", "litera",
            "lumen", "lux", "materia", "minty", "pulse", "sandstone", "simplex", "sketchy", "slate",
            "solar", "spacelab", "superhero", "united", "yeti"
        }
    };

    bool themeSelectorVisible;
    string currentTheme;
    [Parameter] public string Theme { get; set; }
    [Parameter] public RenderFragment<ToggleButtonContext> ToggleButton { get; set; }
    [Parameter] public RenderFragment<ThemeSelectorContext> ThemeSelectorContainer { get; set; }
        =  (c) => b =>  {
            if(c.ThemeSelectorVisible)
                c.ThemeSelectorView(b);
        };
    [Parameter] public RenderFragment<StylesheetLinkContext> StylesheetLinkContainer { get; set; }

    readonly JSModuleSource _jsModule = new JSModuleSource();
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender)
            await _jsModule.Attach(JSRuntime);
    }
    string GetUrlWithSpecifiedTheme(string themeName) {
        var uri = new Uri(NavigationManager.Uri);
        var queryParts = QueryHelpers.ParseNullableQuery(uri.Query) ?? new ();
        queryParts[nameof(Theme)] = themeName;
        return QueryHelpers.AddQueryString(uri.LocalPath, queryParts.ToDictionary(x => x.Key, x => x.Value.ToString()));
    }
    protected override void OnInitialized() {
        NavigationManager.LocationChanged += OnLocationChanged;
        SyncThemeParameter();
        currentTheme = Theme;
    }
    protected bool SyncThemeParameter() {
        Theme = QueryHelpers.ParseNullableQuery(new Uri(NavigationManager.Uri).Query)?.GetValueOrDefault(nameof(Theme)) ?? "default";
        return Theme != currentTheme;
    }
    public  ValueTask DisposeAsync() {
        NavigationManager.LocationChanged -= OnLocationChanged;
        return _jsModule.DisposeAsync();
    }
    void OnLocationChanged(object sender, LocationChangedEventArgs args) {
        if(SyncThemeParameter()) {
            var theme = Theme ?? "default";
            InvokeAsync(async () => {
                await _jsModule.PreloadStylesheetResource($"/css/switcher-resources/themes/{theme}/bootstrap.min.css");
                currentTheme = theme;
                StateHasChanged();
            });
        }
    }

}